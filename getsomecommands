import sys
import os
import time
import subprocess
import getpass
import pexpect
import re
import codecs

from getpass import getpass as pp

regex_bnanode=r'bna\-\w{4}'
divider = '____________________________________________________________'

os.system("clear")

print("nocvalidate version 2 (you must have bna access):\n")
site = input("Enter your 4-digit site number: ")
ad = pp("Enter your AD password: ")

nodelist = "\n1) r-a\n2) r-b\n3) s-upc-1\n4) s-upc-2\n5) s-upc-3\n6) s-gdc-1\n7) s-gm-1\n8) s-gm-2\n9) s-grc-1\n10) s-grc-2\n11) s-lp-1\n
12) s-lp-2\n13) s-pics-1\n14) s-rcv-1\n15) s-rcv-2\n16) s-rx-1\n17) s-tle-1\n18) s-mbr-1\n19) Other"

def switchchk():
        print(divider)
        print("Version Output:\n")
        p.sendline('sh ver | i uptime|reason|Mode_|----|__WS|^Switch')
        p.expect('#')
        print(p.before.decode('utf-8'))
        p.sendline('term len 0')
        p.expect('#')
        print(divider)
        print("Power on Self Test:\n")
        p.sendline('sh post')
        p.expect('#')
        print(p.before.decode('utf-8'))
        p.sendline('term len 0')
        p.expect('#')
        print(divider)
        print("Switches Provisioned:\n")
        p.sendline('sh run | i ^swi')
        p.expect('#')
        print(p.before.decode('utf-8'))
        print(divider)
        print("Stack Switch Details:\n")
        p.sendline('sh switch detail | exc Switch')
        p.expect('#')
        print(p.before.decode('utf-8'))
        print(divider)
        print("Switch Environmental Status:\n")
        p.sendline('sh env all | exc Serial')
        p.expect('#')
        print(p.before.decode('utf-8'))
        print(divider)
        p.sendline('term len 0')
        p.expect('#')
        print("Vlan List:\n")
        p.sendline('sh vlan br')
        p.expect('#')
        print(p.before.decode('utf-8'))
        print(divider)
        print('CDP Neighbors:\n')
        p.sendline('sh cdp nei')
        p.expect('#')
        print(p.before.decode('utf-8'))
        print(divider)
        print("Interfaces:\n")
        p.sendline('sh int status')
        p.expect('#')
        print(p.before.decode('utf-8'))
        p.sendline('term len 20')
        p.expect('#')

#Use ds to establish which bna segment the site is on
segchk = subprocess.Popen(["ds " +site], stdout=subprocess.PIPE, shell=True)
segout = segchk.stdout.read()
segoutr = re.findall(regex_bnanode, str(segout))
l = (segoutr[-1] +' -p 4000')
ll = (segoutr[-1])

#Log in to bna segment
os.system("clear")
print("One moment please...")
p = pexpect.spawn('ssh -oStrictHostKeyChecking=no '+ l)
p.expect('Password:')
p.sendline(ad)
p.expect('$')
os.system("clear")

while True:
        device = input(nodelist+ '\n\n' +"Please choose from one of the following options: ")
        if int(device) >=20:
                print("That is not a valid option!")
                continue
        break

os.system("clear")
#Validation checks

if int(device) is 1:
        print('Pinging r-a...\n')
        pingra = subprocess.Popen(["ping r-a.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pingraout = pingra.stdout.read().decode('utf-8')
        if "0 received" in pingraout:
                print("r-a is unpingable.")
                sys.exit()
        if "unknown host" in pingraout:
                print('Unknown host!')
                sys.exit()
        else:
                print(pingraout)
                print('\n\n')
                print('Logging in to r-a, please wait...')
        p.sendline('connect r-a.s0'+site+'.us.XXXXXX.com')
        p.expect('#')
        os.system('clear')
        print(divider)
        print("BGP Information:")
        print(divider)
        print("Corporate BGP Peers:\n")
        p.sendline('sh bgp sum | b ^N')
        p.expect('#')
        print(p.before.decode('utf-8'))
        print(divider)
        print("Guest WiFi BGP Peers:\n")
        p.sendline('sh bgp vpnv4 unicast vrf INTERNET sum | b ^N')
        p.expect('#')
        print(p.before.decode('utf-8'))
        print(divider)
        print("Descriptions for Circuit Interfaces:\n")
        p.sendline("sh int des | i ^Int|\.60_|\.61_|^Gi.*0/1|^Gi.*0/2|^Seri")
        p.expect('#')
        print(p.before.decode('utf-8'))
        print('\n')
        print(divider)
        print(divider)
        print("Router Information:")
        print(divider)
        print("Interfaces:\n")
        p.sendline('sh ip int br | exc 0/0.|0/1.')
        p.expect('#')
        print(p.before.decode('utf-8'))
        print(divider)
        print("CDP Neighbors:\n")
        p.sendline('sh cdp nei')
        p.expect('#')
        print(p.before.decode('utf-8'))
        print(divider)
        print("Uptime/Reload reason:\n")
        p.sendline("sh version | i uptime|reason")
        p.expect('#')
        print(p.before.decode('utf-8'))
        print(divider)
        print("Flash Output .bin:\n")
        p.sendline('sh flash | i .bin')
        p.expect('#')
        print(p.before.decode('utf-8'))
if int(device) is 2:
        print('Pinging r-b...\n')
        pingrb = subprocess.Popen(["ping r-b.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pingrbout = pingrb.stdout.read().decode('utf-8')
        if "0 received" in pingrbout:
                print("r-b is unpingable.")
                sys.exit()
        if "unknown host" in pingrbout:
                print('Unknown host!')
                sys.exit()
        else:
                print(pingrbout)
                print('\n\n')
                print('Logging in to r-b, please wait...')
        p.sendline('connect r-b.s0'+site+'.us.xxxxx.com')
        p.expect('#')
        os.system('clear')
        print(divider)
        print("BGP Information:")
        print(divider)
        print("Corporate BGP Peers:\n")
        p.sendline('sh bgp sum | b ^N')
        p.expect('#')
        print(p.before.decode('utf-8'))
        print(divider)
        print("Guest WiFi BGP Peers:\n")
        p.sendline('sh bgp vpnv4 unicast vrf INTERNET sum | b ^N')
        p.expect('#')
        print(p.before.decode('utf-8'))
        print(divider)
        print("Descriptions for Circuit Interfaces:\n")
        p.sendline("sh int des | i ^Int|\.60_|\.61_|^Gi.*0/1|^Gi.*0/2|^Seri")
        p.expect('#')
        print(p.before.decode('utf-8'))
        print('\n')
        print(divider)
        print(divider)
        print("Router Information:")
        print(divider)
        print("Interfaces:\n")
        p.sendline('sh ip int br | exc 0/0.|0/1.')
        p.expect('#')
        print(p.before.decode('utf-8'))
        print(divider)
        print("CDP Neighbors:\n")
        p.sendline('sh cdp nei')
        p.expect('#')
        print(p.before.decode('utf-8'))
        print(divider)
        print("Uptime/Reload reason:\n")
        p.sendline("sh version | i uptime|reason")
        p.expect('#')
        print(p.before.decode('utf-8'))
        print(divider)
        print("Flash Output .bin:\n")
        p.sendline('sh flash | i .bin')
        p.expect('#')
        print(p.before.decode('utf-8'))
if int(device) is 3:
        print('Pinging s-upc-1...\n')
        pingupc1 = subprocess.Popen(["ping s-upc-1.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pingupc1out = pingupc1.stdout.read().decode('utf-8')
        if "0 received" in pingupc1out:
                print("s-upc-1 is unpingable.")
                sys.exit()
        if "unknown host" in pingupc1out:
                print('Unknown host!')
                sys.exit()
        else:
                print(pingupc1out)
                print('\n\n')
                print('Logging in to s-upc-1, please wait...')
        p.sendline('connect s-upc-1.s0'+site+'.us.xxxxx.com')
        p.expect('#')
        os.system('clear')
        p.sendline('term len 0')
        p.expect('#')
        p.sendline('sh inv')
        p.expect('#')
        upc1chk = p.before.decode('utf-8')
        if 'C4506' in upc1chk:
                print(divider)
                print("Uptime & Reload Reason:\n")
                p.sendline('sh ver | i uptime|returned')
                p.expect('#')
                print(p.before.decode('utf-8'))
                print(divider)
                print("Switch Environment Status:\n")
                p.sendline('term len 0')
                p.expect('#')
                p.sendline('sh env')
                p.expect('#')
                print(p.before.decode('utf-8'))
                print(divider)
                print('Switch Module Status:\n')
                p.sendline('sh mod')
                p.expect('#')
                print(p.before.decode('utf-8'))
                print(divider)
                print('Vlan List:\n')
                p.sendline('sh vlan br')
                p.expect('#')
                print(p.before.decode('utf-8'))
                print(divider)
                print('CDP Neighbors:\n')
                p.sendline('sh cdp nei')
                print(p.before.decode('utf-8'))
                print(divider)
                print('Interfaces:\n')
                p.sendline('sh int status')
                print(p.before.decode('utf-8'))
                p.sendline('term len 20')
        if 'C4506' not in upc1chk:
                switchchk()
if int(device) is 4:
        print('Pinging s-upc-2...\n')
        pingupc2 = subprocess.Popen(["ping s-upc-2.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pingupc2out = pingupc2.stdout.read().decode('utf-8')
        if "0 received" in pingupc2out:
                print("s-upc-2 is unpingable.")
                sys.exit()
        if "unknown host" in pingupc2out:
                print('Unknown host!')
                sys.exit()
        else:
                print(pingupc2out)
                print('\n\n')
                print('Logging in to s-upc-2, please wait...')
        p.sendline('connect s-upc-2.s0'+site+'.us.xxxxx.com')
        p.expect('#')
        os.system('clear')
        p.sendline('term len 0')
        p.expect('#')
        p.sendline('sh inv')
        p.expect('#')
        upc2chk = p.before.decode('utf-8')
        if 'C4506' in upc2chk:
                print(divider)
                print("Uptime & Reload Reason:\n")
                p.sendline('sh ver | i uptime|returned')
                p.expect('#')
                print(p.before.decode('utf-8'))
                print(divider)
                print("Switch Environment Status:\n")
                p.sendline('term len 0')
                p.expect('#')
                p.sendline('sh env')
                p.expect('#')
                print(p.before.decode('utf-8'))
                print(divider)
                print('Switch Module Status:\n')
                p.sendline('sh mod')
                p.expect('#')
                print(p.before.decode('utf-8'))
                print(divider)
                print('Vlan List:\n')
                p.sendline('sh vlan br')
                p.expect('#')
                print(p.before.decode('utf-8'))
                print(divider)
                print('CDP Neighbors:\n')
                p.sendline('sh cdp nei')
                print(p.before.decode('utf-8'))
                print(divider)
                print('Interfaces:\n')
                p.sendline('sh int status')
                print(p.before.decode('utf-8'))
                p.sendline('term len 20')
        if 'C4506' not in upc2chk:
                switchchk()
if int(device) is 5:
        print('Pinging s-upc-3...\n')
        pingupc3 = subprocess.Popen(["ping s-upc-3.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pingupc3out = pingupc3.stdout.read().decode('utf-8')
        if "0 received" in pingupc3out:
                print("s-upc-3 is unpingable.")
                sys.exit()
        if "unknown host" in pingupc3out:
                print('Unknown host!')
                sys.exit()
        else:
                print(pingupc3out)
                print('\n\n')
                print('Logging in to s-upc-3, please wait...')
        p.sendline('connect s-upc-3.s0'+site+'.us.xxxxx.com')
        p.expect('#')
        os.system('clear')
        switchchk()
if int(device) is 6:
        print('Pinging s-gdc-1...\n')
        pinggdc = subprocess.Popen(["ping s-gdc-1.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pinggdcout = pinggdc.stdout.read().decode('utf-8')
        if "0 received" in pinggdcout:
                print("s-gdc-1 is unpingable.")
                sys.exit()
        if "unknown host" in pinggdcout:
                print('Unknown host!')
                sys.exit()
        else:
                print(pinggdcout)
                print('\n\n')
                print('Logging in to s-gdc-1, please wait...')
        p.sendline('connect s-gdc-1.s0'+site+'.us.xxxxx.com')
        p.expect('#')
        os.system('clear')
        switchchk()
if int(device) is 7:
        print('Pinging s-gm-1...\n')
        pinggm1 = subprocess.Popen(["ping s-gm-1.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pinggm1out = pinggm1.stdout.read().decode('utf-8')
        if "0 received" in pinggm1out:
                print("s-gm-1 is unpingable.")
                sys.exit()
        if "unknown host" in pinggm1out:
                print('Unknown host!')
                sys.exit()
        else:
                print(pinggm1out)
                print('\n\n')
                print('Logging in to s-gm-1, please wait...')
        p.sendline('connect s-gm-1.s0'+site+'.us.xxxxx.com')
        p.expect('#')
        os.system('clear')
        switchchk()
if int(device) is 8:
        print('Pinging s-gm-2...\n')
        pinggm2 = subprocess.Popen(["ping s-gm-2.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pinggm2out = pinggm2.stdout.read().decode('utf-8')
        if "0 received" in pinggm2out:
                print("s-gm-2 is unpingable.")
                sys.exit()
        if "unknown host" in pinggm2out:
                print('Unknown host!')
                sys.exit()
        else:
                print(pinggm2out)
                print('\n\n')
                print('Logging in to s-gm-2, please wait...')
        p.sendline('connect s-gm-2.s0'+site+'.us.xxxxx.com')
        p.expect('#')
        os.system('clear')
        switchchk()
if int(device) is 9:
        print('Pinging s-grc-1...\n')
        pinggrc1 = subprocess.Popen(["ping s-grc-1.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pinggrc1out = pinggrc1.stdout.read().decode('utf-8')
        if "0 received" in pinggrc1out:
                print("s-grc-1 is unpingable.")
                sys.exit()
        if "unknown host" in pinggrc1out:
                print('Unknown host!')
                sys.exit()
        else:
                print(pinggrc1out)
                print('\n\n')
                print('Logging in to s-grc-1, please wait...')
        p.sendline('connect s-grc-1.s0'+site+'.us.xxxx.com')
        p.expect('#')
        os.system('clear')
        switchchk()
if int(device) is 10:
        print('Pinging s-grc-2...\n')
        pinggrc2 = subprocess.Popen(["ping s-grc-2.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pinggrc2out = pinggrc2.stdout.read().decode('utf-8')
        if "0 received" in pinggrc2out:
                print("s-grc-2 is unpingable.")
                sys.exit()
        if "unknown host" in pinggrc2out:
                print('Unknown host!')
                sys.exit()
        else:
                print(pinggrc2out)
                print('\n\n')
                print('Logging in to s-grc-2, please wait...')
        p.sendline('connect s-grc-2.s0'+site+'.us.xxxxx.com')
        p.expect('#')
        os.system('clear')
        switchchk()
if int(device) is 11:
        print('Pinging s-lp-1...\n')
        pinglp1 = subprocess.Popen(["ping s-lp-1.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pinglp1out = pinglp1.stdout.read().decode('utf-8')
        if "0 received" in pinglp1out:
                print("s-lp-1 is unpingable.")
                sys.exit()
        if "unknown host" in pinglp1out:
                print('Unknown host!')
                sys.exit()
        else:
                print(pinglp1out)
                print('\n\n')
                print('Logging in to s-lp-1, please wait...')
        p.sendline('connect s-lp-1.s0'+site+'.us.xxxxx.com')
        p.expect('#')
        os.system('clear')
        switchchk()
if int(device) is 12:
        print('Pinging s-lp-2...\n')
        pinglp2 = subprocess.Popen(["ping s-lp-2.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pinglp2out = pinglp2.stdout.read().decode('utf-8')
        if "0 received" in pinglp2out:
                print("s-lp-2 is unpingable.")
                sys.exit()
        if "unknown host" in pinglp2out:
                print('Unknown host!')
                sys.exit()
        else:
                print(pinglp2out)
                print('\n\n')
                print('Logging in to s-lp-2, please wait...')
        p.sendline('connect s-lp-2.s0'+site+'.us.xxxxx.com')
        p.expect('#')
        os.system('clear')
        switchchk()
if int(device) is 13:
        print('Pinging s-pics-1...\n')
        pingpics = subprocess.Popen(["ping s-pics-1.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pingpicsout = pingpics.stdout.read().decode('utf-8')
        if "0 received" in pingpicsout:
                print("s-pics-1 is unpingable.")
                sys.exit()
        if "unknown host" in pingpicsout:
                print('Unknown host!')
                sys.exit()
        else:
                print(pingpicsout)
                print('\n\n')
                print('Logging in to s-pics-1, please wait...')
        p.sendline('connect s-pics-1.s0'+site+'.us.xxxxx.com')
        p.expect('#')
        os.system('clear')
        switchchk()
if int(device) is 14:
        print('Pinging s-rcv-1...\n')
        pingrcv1 = subprocess.Popen(["ping s-rcv-1.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pingrcv1out = pingrcv1.stdout.read().decode('utf-8')
        if "0 received" in pingrcv1out:
                print("s-rcv-1 is unpingable.")
                sys.exit()
        if "unknown host" in pingrcv1out:
                print('Unknown host!')
                sys.exit()
        else:
                print(pingrcv1out)
                print('\n\n')
                print('Logging in to s-rcv-1, please wait...')
        p.sendline('connect s-rcv-1.s0'+site+'.us.xxxxx.com')
        p.expect('#')
        os.system('clear')
        switchchk()
if int(device) is 15:
        print('Pinging s-rcv-2...\n')
        pingrcv2 = subprocess.Popen(["ping s-rcv-2.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pingrcv2out = pingrcv2.stdout.read().decode('utf-8')
        if "0 received" in pingrcv2out:
                print("s-rcv-2 is unpingable.")
                sys.exit()
        if "unknown host" in pingrcv2out:
                print('Unknown host!')
                sys.exit()
        else:
                print(pingrcv2out)
                print('\n\n')
                print('Logging in to s-rcv-2, please wait...')
        p.sendline('connect s-rcv-2.s0'+site+'.us.xxxxx.com')
        p.expect('#')
        os.system('clear')
        switchchk()
if int(device) is 16:
        print('Pinging s-rx-1...\n')
        pingrx1 = subprocess.Popen(["ping s-rx-1.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pingrx1out = pingrx1.stdout.read().decode('utf-8')
        if "0 received" in pingrx1out:
                print("s-rx-1 is unpingable.")
                sys.exit()
        if "unknown host" in pingrx1out:
                print('Unknown host!')
                sys.exit()
        else:
                print(pingrx1out)
                print('\n\n')
                print('Logging in to s-rx-1, please wait...')
        p.sendline('connect s-rx-1.s0'+site+'.us.xxxxxx.com')
        p.expect('#')
        os.system('clear')
        switchchk()
if int(device) is 17:
        print('Pinging s-tle-1...\n')
        pingtle1 = subprocess.Popen(["ping s-tle-1.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pingtle1out = pingtle1.stdout.read().decode('utf-8')
        if "0 received" in pingtle1out:
                print("s-tle-1 is unpingable.")
                sys.exit()
        if "unknown host" in pingtle1out:
                print('Unknown host!')
                sys.exit()
        else:
                print(pingtle1out)
                print('\n\n')
                print('Logging in to s-tle-1, please wait...')
        p.sendline('connect s-tle-1.s0'+site+'.us.xxxxxx.com')
        p.expect('#')
        os.system('clear')
        switchchk()
if int(device) is 18:
        print('Pinging s-mbr-1...\n')
        pingmbr1 = subprocess.Popen(["ping s-mbr-1.s0"+site+".us -c 3"], stdout=subprocess.PIPE, shell=True)
        pingmbr1out = pingmbr1.stdout.read().decode('utf-8')
        if "0 received" in pingmbr1out:
                print("s-mbr-1 is unpingable.")
                sys.exit()
        if "unknown host" in pingmbr1out:
                print('Unknown host!')
                sys.exit()
        else:
                print(pingmbr1out)
                print('\n\n')
                print('Logging in to s-mbr-1, please wait...')
        p.sendline('connect s-mbr-1.s0'+site+'.us.xxxxx.com')
        p.expect('#')
        os.system('clear')
        switchchk()
if int(device) is 19:
        oth = input('\n' +"Please input device host name (x-xxx-x): ")
        print('Pinging Device...\n')
        pingoth1 = subprocess.Popen(["ping "+oth+".s0"+site+".us -c 3 -i .2"], stdout=subprocess.PIPE, shell=True)
        pingoth1out = pingoth1.stdout.read().decode('utf-8')
        if "0 received" in pingoth1out:
                print(oth+" is unpingable.")
                sys.exit()
        if "unknown host" in pingoth1out:
                print('Unknown host!')
                sys.exit()
        else:
                print(pingoth1out)
                print('\n\n')
                print('Logging in to '+oth+', please wait...')
        p.sendline('connect '+oth+'.s0'+site+'.us.xxxxx.com')
        p.expect('#')
        os.system('clear')
        switchchk()

print(divider)
print(divider)
print("nocvalidate v2 complete")
print(divider)
